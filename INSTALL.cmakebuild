There is an experimental build system that you can use to compile and install
icewm. It's constructed around cmake and needs a sufficiently modern cmake
version (2.6) for the processing.

Installation instructions:

 * for system requirements, see INSTALL file
 * run: mkdir build ; cd build ; cmake ..
 *  check the output. To change variables, rerun the command above and add
   -DVARIABLE=replacement_value. If some values are sticky or some checks are
   not rerun (although you might have installed the reported missing packages),
   delete the file CMakeCache.txt and try again.
 * run: make -j4
 * Adjust the last argument as needed, -j$(nproc) is a possible way on GNU
 * run: make install

Developer/Integrator notes:

 * you can see more internals and documented variables with "cmake -LAH"
 * CMAKE_CXX_FLAGS are appended to default compiler options. To override
   completely, see CXXFLAGS_COMMON in src/CMakeLists.txt
 * use cmake -DCMAKE_INSTALL_PREFIX=... (or related variables, see
   CMakeLists.xt) to specify the target file space (default is /usr/local)
 * make install DESTDIR=/tmp/elsewhere copies to another target location
 * Potential tuning options:
   -DEXTRA_LIBS="-flto -lsupc++" -DCMAKE_CXX_FLAGS="-flto"
   -DEXTRA_MSGMERGE=--verbose -DEXTRA_MSGFMT=--verbose
 * There is a call of the locally compiled binary genpref that builds a sample
   preferences file with default values. This might cause problems on
   crosscompilation builds. Therefore, this setp is optional and can be skipped 
   with -DCROSSCOMPILE=on .
